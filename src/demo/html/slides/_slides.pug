section
	h1.animate__flipInX.animate__slow Appearance
	h3.animate__fadeInDown.animate__faster(data-delay="75", data-container-delay="700", data-split="letters") for Reveal.js

	.row.fivegrid.smallcircles
		img.demoimg.smallcircle.animate__shrinkIn(data-src="assets/img/1.jpg", data-delay="800")
		+iterate('4')
			img.demoimg.smallcircle.animate__shrinkIn(data-src=`assets/img/${nr + 1}.jpg`,  data-delay="240" - (nr * 20))

section
	section
		h2 Why?

	section
		p.small In Powerpoint you can make slides with items that appear automatically with effects. This plugin for Reveal.js tries to achieve the same result.
		p.small Appearance is easy to set up. It uses #[a(href="https://animate.style", target="_blank") Animate.css] by Daniel Eden for the animations, with some changes to allow for a non-animated state. 

section
	section
		h2 Examples
		p Let's check out what Appearance does:

	section
		h3 Let text appear
		ul
			li.animate__bounceInLeft Add it to any text element.
			li.animate__bounceInLeft Like list items, or headers.
			li.animate__bounceInLeft It adds some impact.

	section
		h3.animate__fadeInDown(data-split="words", data-delay="200") Let lines appear per word
		h3.animate__fadeInDown(data-delay="600") &nbsp;orâ€¦ #[span.animate__flipInX.animate__faster(data-split="letters", data-delay="75", data-container-delay="800" ) per character.]

	section
		h3 Let images appear
		.row.fivegrid
			+iterate('5')
				img.demoimg.animate__flipInX(data-src="assets/img/" + nr + ".jpg")

	section
		h3 Use with fragments
		p.animate__fadeInDown Inside fragments like this #[span.animate__fadeInDown.animate__faster(style="font-size: .8em") (click next)]:

		.fragment
			.row.fivegrid
				+iterate('5')
					img.animate__fadeInDown(data-src=`assets/img/${nr}.jpg`)

			p.fragment.animate__fadeInDown(style="margin-bottom: 0") Or as a fragment itself.

	section
		h3 Animate.css animations
		p.small Appearance supports the standard entrance/in animations that Animate.css offers. Some examples:
		ul
			each anim, index in ["animate__bounceInDown", "animate__fadeInLeft", "animate__flipInX", "animate__rotateIn", "animate__zoomInDown","animate__jackInTheBox"]
				li(class=anim, data-delay=index != 0 ? "1000": null) .#{anim}

	section
		h3 Additional animations
		ul
			each anim, index in ["animate__skidLeft", "animate__skidLeftBig", "animate__skidRight", "animate__skidRightBig", "animate__shrinkIn", "animate__shrinkInBig"]
				li(class=anim, data-delay=index != 0 ? "1000": null) .#{anim}

		p.small Note: The shrinkInBlur animation was removed from Appearance, due to performance issues. For backwards compatibility, any element that used it will now use the #[code shrinkIn] animation instead.

section
	section
		h2 Setup

	section
		h2 Basics
		p There are really only three steps:
		ol
			li.animate__fadeInLeft Install Appearance
			li.animate__fadeInLeft Edit the markup to add animation classes
			li.animate__fadeInLeft Enjoy the animations

	section
		h3 JavaScript
		p.small Load the script and make a reference to it in the Reveal plugin options:
		pre
			code.hljs.html(data-line-numbers).
				&lt;script src="plugin/appearance/appearance.js"&gt;&lt;/script&gt;
				&lt;script&gt;
					Reveal.initialize({
						plugins: [ Appearance ]
					});
				&lt;/script&gt;
		//-

	section
		h3 Markup (auto)

		p.small For #[em automatic markup], you can use the #[a(href="#/autoappear") #[code autoappear]] option. 
		p.small For #[em manual markup], continue to the next slide.

	section
		h3 Markup (manual)

		p.small Add an animation class to the elements that you would like to have animated when the slide appears:
		pre
			code.hljs.html(data-line-numbers).
				&lt;img class=&quot;animate__fadeInDown&quot; src=&quot;assets/img/1.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown&quot; src=&quot;assets/img/2.jpg&quot;&gt;

		p.small Check the #[a(href="demo-markdown.html") Markdown demo] to see how you do this in Markdown. A Quarto extension can be found #[a(href="https://github.com/Martinomagnifico/quarto-appearance") here].

	section
		h3 Markup (manual) for words or letters

		p.small Add an animation class to the sentence or word that you want to split into its parts, and add a data-attribute for the kind of split you want:
		pre
			code.hljs.html(data-line-numbers).
				&lt;h3 class=&quot;animate__fadeInDown&quot; data-split=&quot;words&quot;&gt;Split into words&lt;/h3&gt;
				&lt;h3 class=&quot;animate__fadeInDown&quot; data-split=&quot;letters&quot;&gt;Split into letters&lt;/h3&gt;
		//-

section
	section
		h2 Now change it
		p You can change the delay, speed and start of animations easily: 

	section
		h3 Change the delay
		small Use #[code data-delay="*"] on each element, where the wildcard is the delay in microseconds from the appearance of the previous element.

		.row.fivegrid
			img.animate__fadeInDown(data-src="assets/img/1.jpg", data-delay="0")
			+iterate('4')
				img.animate__fadeInDown(data-src=`assets/img/${nr + 1}.jpg`,  data-delay="240" - (nr * 40))
		br
		pre
			code.hljs.html(data-line-numbers).
				&lt;img class=&quot;animate__fadeInDown&quot; data-delay=&quot;0&quot; src=&quot;assets/img/1.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown&quot; data-delay=&quot;200&quot; src=&quot;assets/img/2.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown&quot; data-delay=&quot;160&quot; src=&quot;assets/img/3.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown&quot; data-delay=&quot;120&quot; src=&quot;assets/img/4.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown&quot; data-delay=&quot;80&quot; src=&quot;assets/img/5.jpg&quot;&gt;
		//-
		small #[code data-delay] is automatically converted to CSS animation delay.

	section
		h3 Change the animation speed
		small Use the speed classes from Animate.css to change the speed of the animation:
		.row.fivegrid
			each speed in ["animate__slower", "animate__slow", "", "animate__fast", "animate__faster"]
				- nr = nr + 1
				small.animate__fadeIn(style="font-size: 0.4em", data-delay="50")
					if (speed != "")
						code=`.${speed}`

		- nr = 0
		.row.fivegrid
			each speed in ["animate__slower", "animate__slow", "", "animate__fast", "animate__faster"]
				- nr = nr + 1
				img.animate__bounceIn(class=speed, style="margin: auto", data-src=`assets/img/${nr}.jpg`)
		br
		pre
			code.hljs.html(data-line-numbers).
				&lt;img class=&quot;animate__fadeInDown animate__slower&quot; src=&quot;assets/img/1.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown animate__slow&quot; src=&quot;assets/img/2.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown&quot; src=&quot;assets/img/3.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown animate__fast&quot; src=&quot;assets/img/4.jpg&quot;&gt;
				&lt;img class=&quot;animate__fadeInDown animate__faster&quot; src=&quot;assets/img/5.jpg&quot;&gt;
		//-

	section
		h3 Change the settings for words or letters
		small For words and letters, just set the speed and delay as described above. The smaller parts will inherit these settings. Set a #[code data-container-delay="*"] for a different delay for the container, compared to the standard #[code delay = 300] from the options. 
		br
		br
		h3.animate__fadeInDown(data-split="words") Split into words
		h3.animate__fadeInDown.animate__faster(data-split="letters" data-delay="75" data-container-delay="800") Split into letters

		br
		pre
			code.hljs.html(data-line-numbers).
				&lt;h3 class=&quot;animate__fadeInDown&quot; data-split=&quot;words&quot;&gt;Split into words&lt;/h3&gt;
				&lt;h3 class=&quot;animate__fadeInDown animate__faster&quot; data-split=&quot;letters&quot; data-delay=&quot;75&quot; data-container-delay=&quot;800&quot;&gt;Split into letters&lt;/h3&gt;
		//-

	section(data-auto-animate)
		h3 Change when Appearance starts

	section(data-auto-animate, data-appearevent="auto")
		h3 Change when Appearance starts
		div
			p.animate__fadeInUp You can use any of the following events:
		ul
			li.animate__fadeInLeft #[em slidetransitionend] (default, after the transition)
			li.animate__fadeInLeft #[em slidechanged] (with the transition)
			li.animate__fadeInLeft #[em auto] (with transition, on autoanimate slides)
		div
			br
			small.animate__fadeInUp This can be set per-slide with data-attributes, or globally in the Appearance options.

section
	section#autoappear
		h2 Autoappear
		p You can simplify the addition of animation classes:

	section
		p.small Sometimes (for example with Markdown), adding classes to elements is a chore. 
		p.small Appearance can automatically add animation classes to specific elements (tags or other selectors) in the presentation (with the option #[code autoappear]) or per slide (with #[code data-autoappear]).


	section
		h3 Global autoappear mode
		ul
			+iterate('2')
				li.globalul="This is list item " + nr

		pre
			code.hljs.js(data-line-numbers="4,5").
				Reveal.initialize({
					// ...
					appearance: {
						autoappear: true,
						autoelements: '{"ul li": "animate__fadeInLeft"}'
					}
					// ...
		//-
		pre
			code.hljs.html(data-line-numbers).
				&lt;ul&gt;
					&lt;li&gt;This is list item 1&lt;/li&gt;
					&lt;li&gt;This is list item 2&lt;/li&gt;
				&lt;/ul&gt;
		//-

		p.small You can use a simple JSON object, or more elaborate like this: #[code '{"ul li": {"animation":"animate__fadeInLeft", "speed":"slow", "delay":"100"}}'].

	section(data-autoappear="true")
		h3 Local auto-appear
		p.small This will use the JSON object from the global autoelements option, even if autoappear is false.
		ul
			li.localauto This is a list item

		pre
			code.hljs.js(data-line-numbers="4,5").
				Reveal.initialize({
					// ...
					appearance: {
						autoappear: false,
						autoelements: '{"ul li": "animate__fadeInLeft"}'
					}
					// ...
		//-
		pre
			code.hljs.html(data-line-numbers="1").
				&lt;section data-autoappear=&quot;true&quot;&gt;
					&lt;ul&gt;
						&lt;li&gt;This is a list item&lt;/li&gt;
					&lt;/ul&gt;
				&lt;/section&gt;
		//-

	section(data-autoappear='{"ul li":"animate__fadeInRight", "h3": {"animation":"animate__fadeInDown", "speed":"slow", "delay":"100"}}')
		h3 Local auto-appear, specified

		small You can also add a JSON object to the slideâ€™s #[code data-autoappear], with specific elements, their animations class(es) as a string or an object with animations class(es), optional speed and optional delay.

		ul
			+iterate('2')
				li.specified="This is list item " + nr

		pre
			code.hljs.html(data-line-numbers).
				&lt;section data-autoappear='{"ul li":"animate__fadeInRight", "h3": {"animation":"animate__fadeInDown", "speed":"slow", "delay":"100"}}'&gt;
					&lt;h3&gt;Local auto-appear, specified&lt;/h3&gt;
					&lt;ul&gt;
						&lt;li&gt;This is list item 1&lt;/li&gt;
						&lt;li&gt;This is list item 2&lt;/li&gt;
					&lt;/ul&gt;
				&lt;/section&gt;
		//-

	section(data-autoappear='{"h3": {"animation":"animate__fadeInDown", "speed":"fast", "delay":"180", "split":"words", "container-delay":"200ms"}, "h4": {"animation":"animate__fadeInDown", "split":"letters", "delay":"80"}}')
		h3 Local auto-appear, specified and split

		small And you can do the same for any animations that you would like to have on lines and words.

		h4 Appearance

		pre
			code.hljs.html(data-line-numbers).
				&lt;section data-autoappear='{"h3": {"animation":"animate__fadeInDown", "speed":"fast", "delay":"180", "split":"words", "container-delay":"500ms"}, "h4": {"animation":"animate__fadeInDown", "split":"letters", "delay":"80"}}'&gt;
					&lt;h3&gt;Local auto-appear, specified and split&lt;/h3&gt;
					&lt;h4&gt;Appearance&lt;/h4&gt;
				&lt;/section&gt;
		//-
section
	section
		h2 Options
		.centerblock
			ol.twocol
				li hideagain
				li delay
				li appearevent
				li autoappear
				li autoelements
				li csspath
				li animatecsspath
				li compatibility
				li compatibility&shy;baseclass

	section
		h4 Option 1: hideagain
		p.small The #[code hideagain] option will hide elements (that have appeared on the slide) again when moving away from that slide. 
		pre
			code.hljs.js(data-line-numbers="4").
				Reveal.initialize({
					...
					appearance: {
						hideagain: true
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 2: delay
		p.small The #[code delay] option is the base time in ms between appearances. This value governs any elements that do not have an Animate.css speed class assigned to it, or are not inside a slide which includes delay in a data-autoappear attribute.
		pre
			code.hljs.js(data-line-numbers="4").
				Reveal.initialize({
					...
					appearance: {
						delay: 300
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 3: appearevent
		p.small You can change when Appearance starts with any of the following events: #[code slidetransitionend] (default, after the transition), #[code slidechanged] (with the transition) and #[code auto] (with transition, on autoanimate slides). This can be overridden per-slide with data-attributes, like this: #[code data-appearevent="auto"].

		pre
			code.hljs.js(data-line-numbers="4").
				Reveal.initialize({
					...
					appearance: {
						appearevent: slidetransitionend
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 4: autoappear
		p.small The #[code autoappear] option works together with the #[code autoelements] option. When it is set to #[code true], any elements in the autoelements option will animate with the declared animation when the slide or fragment opens. See #[a(href="#/autoappear") #[code autoappear]].

		pre
			code.hljs.js(data-line-numbers="4,5").
				Reveal.initialize({
					...
					appearance: {
						autoappear: false,
						autoelements: false
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 5: autoelements
		p.small These are the elements that #[code autoappear] will target. Each element has a selector and an animation class. If autoappear is off, the elements will still get animation if the section contains a data-autoappear attribute.

		pre
			code.hljs.js(data-line-numbers="4,5").
				Reveal.initialize({
					...
					appearance: {
						autoappear: false,
						autoelements: false
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 6: csspath
		p.small Appearance will automatically load the styling of the plugin. If you want to customise the styling, you can link to your own CSS file here.

		pre
			code.hljs.js(data-line-numbers="4,5").
				Reveal.initialize({
					...
					appearance: {
						csspath: ''
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 7: animatecsspath
		p.small Appearance will also automatically load the styling of Animate.css via a CDN. Note that Animate.css has two links, the first (CDN) one is for version 4, the second (old) one is the version 3 compatibility CDN link.

		pre
			code.hljs.js(data-line-numbers="4-7").
				Reveal.initialize({
					...
					appearance: {
						animatecsspath: {
							link : 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css',
							compat : 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.compat.css',
						}
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 8: compatibility
		p.small This setting is about the breaking changes in Animate.css (used by Appearance). See the migration guide in the Readme for more info. 
		p.small Setting #[code 'compatibility: true'] can let you use your old markup.

		pre
			code.hljs.js(data-line-numbers="4").
				Reveal.initialize({
					...
					appearance: {
						compatibility: false
					},
					plugins: [ Appearance ]
				})
		//-

	section
		h4 Option 9: compatibilitybaseclass
		p.small This setting is about the breaking changes in Animate.css (used by Appearance). See the migration guide in the Readme for more info. 
		p.small This is the baseclass to use if you don't change your markup.

		pre
			code.hljs.js(data-line-numbers="4").
				Reveal.initialize({
					...
					appearance: {
						compatibilitybaseclass: 'animated'
					},
					plugins: [ Appearance ]
				})
		//-


section
	h3 Credits
	ul
		li.animate__fadeInLeft Hakim El Hattab for #[a(href="https://revealjs.com", target="_blank") Reveal.js]
		li.animate__fadeInLeft Daniel Eden for #[a(href="https://animate.style", target="_blank") Animate.css]
		li.animate__fadeInLeft David Marby &amp; Nijiko Yonskai for #[a(href="https://picsum.photos", target="_blank") picsum.photos]
		li.animate__fadeInLeft Photography by #[a(href="https://unsplash.com/photos/6WLGMivmV00", target="_blank") Michael Baird], #[a(href="https://unsplash.com/photos/scwYrU5hCSM", target="_blank") Michael Quinn], #[a(href="https://unsplash.com/photos/YoadQb46v6k", target="_blank") Craig Garner], #[a(href="https://unsplash.com/photos/RlYsCMbF6EI", target="_blank") Grzegorz Mleczek] and #[a(href="https://unsplash.com/photos/QrRSm-QbjW0", target="_blank") Fabrice Villard].